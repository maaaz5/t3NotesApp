import { type NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import type { ChangeEvent, FormEvent } from "react";
import { useRouter } from "next/router";

import { api } from "~/utils/api";

interface FormData {
  id: string;
  title: string;
  description: string;
}

const EditNote: NextPage = () => {
  const router = useRouter();
  const updateNote = api.mynotes.updateNote.useMutation({});
  const notesId = router.query.id as string;
  const getNote = api.mynotes.getOneNote.useQuery({ id: notesId });

  const [formData, setFormData] = useState<FormData>({
    id: "",
    title: "",
    description: "",
  });

  const handleTitle = (event: ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      title: event.target.value,
    });
  };
  const handleDescription = (event: ChangeEvent<HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      description: event.target.value,
    });
  };

  const onSubmit = (e: FormEvent) => {
    e.preventDefault();
    updateNote.mutate({
      id: formData.id,
      title: formData.title,
      description: formData.description,
    });

    setFormData({
      id: "",
      title: "",
      description: "",
    });

    router.push("/").catch((err) => console.log(err));
  };

  useEffect(() => {
    getNote.data &&
      setFormData({
        id: getNote.data.id,
        title: getNote.data.title,
        description: getNote.data.description,
      });
  }, []);

  return (
    <>
      <Head>
        <title>Update Note</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col justify-center bg-slate-800  px-96 ">
        <h1>Create new Note </h1>
        <br></br>
        <form
          className="flex flex-col justify-center"
          onSubmit={(e) => onSubmit(e)}
        >
          <label htmlFor="title">Title</label>
          <input
            className="bg-gray-100"
            type="text"
            name="title"
            id="title"
            required
            value={formData.title}
            onChange={(event) => handleTitle(event)}
          />
          <br></br>
          <label htmlFor="description">Description</label>
          <textarea
            className="bg-gray-100"
            name="description"
            id="description"
            required
            onChange={(event) => handleDescription(event)}
            value={formData.description}
          />

          <button type="submit">Submit</button>
        </form>
      </main>
    </>
  );
};

export default EditNote;
